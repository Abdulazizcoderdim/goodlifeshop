generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  password     String
  firstName    String?
  lastName     String?
  phoneNumber  String?
  surname      String?
  role         UserRole       @default(CUSTOMER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  refreshToken RefreshToken[]
}

enum UserRole {
  CUSTOMER
  ADMIN
  MANAGER
  SUPPORT
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Product {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  slug               String      @unique
  description        String?
  article            String // Артикул: 53001-001
  brand              String // Бренд: Zwilling
  series             String // Серия: ZWILLING ENFINIGY
  originCountry      String // Страна происхождения: КИТАЙ
  discountPercentage Float?
  price              Float
  color              String?
  quantity           Int         @default(0)
  sold               Int         @default(0)
  dimensions         Dimensions? // nested object
  dishwasherSafe     Boolean? // posudomoyka
  batteryRequired    Boolean?
  characteristics    Json? // характеристика: flexible
  variants           Variant[] // ranglar yoki boshqa variantlar
  images             String[] // product images
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?      @db.ObjectId
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?      @db.ObjectId
}

type Dimensions {
  productWeight Float? // kg
  productHeight Float?
  productWidth  Float?
  productLength Float?
  packageHeight Float?
  packageWidth  Float?
  packageLength Float?
  productVolume Float?
}

model Variant {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  color   String?
  price   Float?
  inStock Boolean
  images  String[] // variant-specific images

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Category {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  slug     String @unique
  imageUrl String

  subcategories Subcategory[]
  products      Product[]
}

model Subcategory {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String @unique
  description String
  imageUrl    String

  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  products   Product[]
}

model Post {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  imageUrl  String
  category  PostCategory
  slug      String       @unique
  content   String
  createdAt DateTime     @default(now())
}

enum PostCategory {
  brand_history
  usage_and_care
  recipes
}
